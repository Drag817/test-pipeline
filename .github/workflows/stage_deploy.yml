name: Stage auto deploy

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  chose-instance:
    runs-on: primary
#    outputs:
#      output: ${{ steps.group-info.outputs.* }}
    steps:
      - name: yc setup
        uses: nightstory/setup-yc@v1
        with:
          enable-cache: true

#      - name: Get primary instance weight
#        id: group-info
#        run: yc alb backend-group get production | yq '.["http"]["backends"][0]["backend_weight"]'

#      - name: Check primary
#        if: ${{ (yc alb backend-group get production | yq '.["http"]["backends"][0]["backend_weight"]' == "0") }}
#        run: echo "runner is primary"
#        env:
#          RUNNER: primary

      - name: Check secondary
        env:
          RUNNER: ${{ (yc alb backend-group get production | yq '.["http"]["backends"][0]["backend_weight"]') }}
        run: echo "runner is $RUNNER"
#        env:
#          RUNNER: secondary

  show-instance:
    needs: chose-instance
    runs-on: ubuntu-latest
    steps:
      - name: echo runner
        run: echo "$RUNNER"


#  build:
#    needs: chose-instance
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout main and Submodules
#        uses: actions/checkout@v3
#
#      - name: Docker login
#        run: sudo docker login --username oauth --password ${{ secrets.YANDEX_OAUTH }} cr.yandex
#
#      - name: Build Docker
#        run: |
#          sudo docker build --cache-from cr.yandex/${{ secrets.DOCKER_REGISTRY }}/test:${{ github.ref_name }} -f Dockerfile -t cr.yandex/${{ secrets.DOCKER_REGISTRY }}/test:${{ github.ref_name }} .
#          sudo docker push cr.yandex/${{ secrets.DOCKER_REGISTRY }}/test:${{ github.ref_name }}
#
#  deploy:
#    needs: build
#    runs-on: primary
#    steps:
#      - name: Docker login
#        run: sudo docker login --username oauth --password ${{ secrets.YANDEX_OAUTH }} cr.yandex
#
#      - name: Deploy
#        run: sudo docker run -d -p 5000:5000 cr.yandex/${{ secrets.DOCKER_REGISTRY }}/test:${{ github.ref_name }}
